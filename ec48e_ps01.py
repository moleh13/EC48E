# -*- coding: utf-8 -*-
"""EC48E - PS01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A8RWu9ISb1UdWmRyCcmgEEvBpH1Ma_tO
"""

#!pip install yfinance
#!pip install numpy
#!pip install matplotlib
#!pip install pandas

import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.stats import skew, kurtosis
import math
from tabulate import tabulate

# Retrieve Bitcoin prices from Yahoo Finance API
start_date = '2015-01-01'
end_date = '2023-01-01'
tickers = ['BTC-USD', 'AAPL', 'GOOGL', 'AMZN', 'NVDA', '^NDX', 'XU100.IS', 'AKBNK.IS', 'TUPRS.IS']

data_daily = yf.download(tickers, start=start_date, end=end_date, interval='1d', group_by='ticker')
data_yearly = data_daily.resample('Y').last()
data_monthly = data_daily.resample('M').last()
data_weekly = data_daily.resample('W').last()

# Get 'Close' prices for all tickers
close_prices_daily = data_daily.loc[:, (slice(None), 'Close')]
close_prices_weekly = data_weekly.loc[:, (slice(None), 'Close')]
close_prices_monthly = data_monthly.loc[:, (slice(None), 'Close')]
close_prices_yearly = data_yearly.loc[:, (slice(None), 'Close')]



# Remove the second level of the column index
close_prices_daily.columns = close_prices_daily.columns.droplevel(1)
close_prices_weekly.columns = close_prices_weekly.columns.droplevel(1)
close_prices_monthly.columns = close_prices_monthly.columns.droplevel(1)
close_prices_yearly.columns = close_prices_yearly.columns.droplevel(1)

def remove_nan_from_list(input_list):
    return list(filter(lambda x: not (isinstance(x, float) and math.isnan(x)), input_list))

# BUNU ÇALIŞTIRMA
close_prices_daily['XU100.IS'].iloc[:2034] = close_prices_daily['XU100.IS'].iloc[:2034].apply(lambda x: x / 100)

# Daily Lists

btc_list = remove_nan_from_list(close_prices_daily['BTC-USD'].tolist())
aapl_list = remove_nan_from_list(close_prices_daily['AAPL'].tolist())
googl_list = remove_nan_from_list(close_prices_daily['GOOGL'].tolist())
amzn_list = remove_nan_from_list(close_prices_daily['AMZN'].tolist())
nvda_list = remove_nan_from_list(close_prices_daily['NVDA'].tolist())
ndx_list = remove_nan_from_list(close_prices_daily['^NDX'].tolist())
xu100_list = remove_nan_from_list(close_prices_daily['XU100.IS'].tolist())
akbnk_list = remove_nan_from_list(close_prices_daily['AKBNK.IS'].tolist())
tuprs_list = remove_nan_from_list(close_prices_daily['TUPRS.IS'].tolist())

xu100_list = [price / 100 if price > 20000 else price for price in xu100_list]

# Weekly Lists
btc_list_weekly = remove_nan_from_list(close_prices_weekly['BTC-USD'].tolist())
aapl_list_weekly = remove_nan_from_list(close_prices_weekly['AAPL'].tolist())
googl_list_weekly = remove_nan_from_list(close_prices_weekly['GOOGL'].tolist())
amzn_list_weekly = remove_nan_from_list(close_prices_weekly['AMZN'].tolist())
nvda_list_weekly = remove_nan_from_list(close_prices_weekly['NVDA'].tolist())
ndx_list_weekly = remove_nan_from_list(close_prices_weekly['^NDX'].tolist())
xu100_list_weekly = remove_nan_from_list(close_prices_weekly['XU100.IS'].tolist())
akbnk_list_weekly = remove_nan_from_list(close_prices_weekly['AKBNK.IS'].tolist())
tuprs_list_weekly = remove_nan_from_list(close_prices_weekly['TUPRS.IS'].tolist())

# Monthly Lists
btc_list_monthly = remove_nan_from_list(close_prices_monthly['BTC-USD'].tolist())
aapl_list_monthly = remove_nan_from_list(close_prices_monthly['AAPL'].tolist())
googl_list_monthly = remove_nan_from_list(close_prices_monthly['GOOGL'].tolist())
amzn_list_monthly = remove_nan_from_list(close_prices_monthly['AMZN'].tolist())
nvda_list_monthly = remove_nan_from_list(close_prices_monthly['NVDA'].tolist())
ndx_list_monthly = remove_nan_from_list(close_prices_monthly['^NDX'].tolist())
xu100_list_monthly = remove_nan_from_list(close_prices_monthly['XU100.IS'].tolist())
akbnk_list_monthly = remove_nan_from_list(close_prices_monthly['AKBNK.IS'].tolist())
tuprs_list_monthly = remove_nan_from_list(close_prices_monthly['TUPRS.IS'].tolist())

# Yearly Lists
btc_list_yearly = remove_nan_from_list(close_prices_yearly['BTC-USD'].tolist())
aapl_list_yearly = remove_nan_from_list(close_prices_yearly['AAPL'].tolist())
googl_list_yearly = remove_nan_from_list(close_prices_yearly['GOOGL'].tolist())
amzn_list_yearly = remove_nan_from_list(close_prices_yearly['AMZN'].tolist())
nvda_list_yearly = remove_nan_from_list(close_prices_yearly['NVDA'].tolist())
ndx_list_yearly = remove_nan_from_list(close_prices_yearly['^NDX'].tolist())
xu100_list_yearly = remove_nan_from_list(close_prices_yearly['XU100.IS'].tolist())
akbnk_list_yearly = remove_nan_from_list(close_prices_yearly['AKBNK.IS'].tolist())
tuprs_list_yearly = remove_nan_from_list(close_prices_yearly['TUPRS.IS'].tolist())

btc_series = pd.Series(btc_list)
linear_btc_returns = btc_series.pct_change()

aapl_series = pd.Series(aapl_list)
linear_aapl_returns = aapl_series.pct_change()

googl_series = pd.Series(googl_list)
linear_googl_returns = googl_series.pct_change()

amzn_series = pd.Series(amzn_list)
linear_amzn_returns = amzn_series.pct_change()

nvda_series = pd.Series(nvda_list)
linear_nvda_returns = nvda_series.pct_change()

ndx_series = pd.Series(ndx_list)
linear_ndx_returns = ndx_series.pct_change()

xu100_series = pd.Series(xu100_list)
linear_xu100_returns = xu100_series.pct_change()

akbnk_series = pd.Series(akbnk_list)
linear_akbnk_returns = akbnk_series.pct_change()

tuprs_series = pd.Series(tuprs_list)
linear_tuprs_returns = tuprs_series.pct_change()

print("Linear BTC Returns:")
print(linear_btc_returns)

print("\nLinear AAPL Returns:")
print(linear_aapl_returns)

print("\nLinear GOOGL Returns:")
print(linear_googl_returns)

print("\nLinear AMZN Returns:")
print(linear_amzn_returns)

print("\nLinear NVDA Returns:")
print(linear_nvda_returns)

print("\nLinear NDX Returns:")
print(linear_ndx_returns)

print("\nLinear XU100 Returns:")
print(linear_xu100_returns)

print("\nLinear AKBNK Returns:")
print(linear_akbnk_returns)

print("\nLinear TUPRS Returns:")
print(linear_tuprs_returns)

def calculate_statistics(data):
    mean = np.mean(data)
    variance = np.var(data, ddof=1)  # ddof=1 for sample variance
    std_dev = np.std(data, ddof=1)   # ddof=1 for sample standard deviation
    skewness = skew(data)
    excess_kurtosis = kurtosis(data, fisher=True)  # Fisher's definition for excess kurtosis
    return mean, variance, std_dev, skewness, excess_kurtosis

# Daily Stats
btc_stats = calculate_statistics(pd.Series(btc_list).pct_change()[1:])
aapl_stats = calculate_statistics(pd.Series(aapl_list).pct_change()[1:])
googl_stats = calculate_statistics(pd.Series(googl_list).pct_change()[1:])
amzn_stats = calculate_statistics(pd.Series(amzn_list).pct_change()[1:])
nvda_stats = calculate_statistics(pd.Series(nvda_list).pct_change()[1:])
ndx_stats = calculate_statistics(pd.Series(ndx_list).pct_change()[1:])
xu100_stats = calculate_statistics(pd.Series(xu100_list).pct_change()[1:])
akbnk_stats = calculate_statistics(pd.Series(akbnk_list).pct_change()[1:])
tuprs_stats = calculate_statistics(pd.Series(tuprs_list).pct_change()[1:])

# Weekly Stats
btc_stats_weekly = calculate_statistics(pd.Series(btc_list_weekly).pct_change()[1:])
aapl_stats_weekly = calculate_statistics(pd.Series(aapl_list_weekly).pct_change()[1:])
googl_stats_weekly = calculate_statistics(pd.Series(googl_list_weekly).pct_change()[1:])
amzn_stats_weekly = calculate_statistics(pd.Series(amzn_list_weekly).pct_change()[1:])
nvda_stats_weekly = calculate_statistics(pd.Series(nvda_list_weekly).pct_change()[1:])
ndx_stats_weekly = calculate_statistics(pd.Series(ndx_list_weekly).pct_change()[1:])
xu100_stats_weekly = calculate_statistics(pd.Series(xu100_list_weekly).pct_change()[1:])
akbnk_stats_weekly = calculate_statistics(pd.Series(akbnk_list_weekly).pct_change()[1:])
tuprs_stats_weekly = calculate_statistics(pd.Series(tuprs_list_weekly).pct_change()[1:])

# Monthly Stats
btc_stats_monthly = calculate_statistics(pd.Series(btc_list_monthly).pct_change()[1:])
aapl_stats_monthly = calculate_statistics(pd.Series(aapl_list_monthly).pct_change()[1:])
googl_stats_monthly = calculate_statistics(pd.Series(googl_list_monthly).pct_change()[1:])
amzn_stats_monthly = calculate_statistics(pd.Series(amzn_list_monthly).pct_change()[1:])
nvda_stats_monthly = calculate_statistics(pd.Series(nvda_list_monthly).pct_change()[1:])
ndx_stats_monthly = calculate_statistics(pd.Series(ndx_list_monthly).pct_change()[1:])
xu100_stats_monthly = calculate_statistics(pd.Series(xu100_list_monthly).pct_change()[1:])
akbnk_stats_monthly = calculate_statistics(pd.Series(akbnk_list_monthly).pct_change()[1:])
tuprs_stats_monthly = calculate_statistics(pd.Series(tuprs_list_monthly).pct_change()[1:])

# Yearly Stats
btc_stats_yearly = calculate_statistics(pd.Series(btc_list_yearly).pct_change()[1:])
aapl_stats_yearly = calculate_statistics(pd.Series(aapl_list_yearly).pct_change()[1:])
googl_stats_yearly = calculate_statistics(pd.Series(googl_list_yearly).pct_change()[1:])
amzn_stats_yearly = calculate_statistics(pd.Series(amzn_list_yearly).pct_change()[1:])
nvda_stats_yearly = calculate_statistics(pd.Series(nvda_list_yearly).pct_change()[1:])
ndx_stats_yearly = calculate_statistics(pd.Series(ndx_list_yearly).pct_change()[1:])
xu100_stats_yearly = calculate_statistics(pd.Series(xu100_list_yearly).pct_change()[1:])
akbnk_stats_yearly = calculate_statistics(pd.Series(akbnk_list_yearly).pct_change()[1:])
tuprs_stats_yearly = calculate_statistics(pd.Series(tuprs_list_yearly).pct_change()[1:])

# Function to print stats in a tabular format
def print_stats(title, *stats):
    headers = ["Asset", "Mean", "Variance", "Std_Dev", "Skewness", "Excess_Kurtosis"]
    assets = ["BTC", "AAPL", "GOOGL", "AMZN", "NVDA", "NSDQ", "XU100", "AKBNK", "TUPRS"]

    # Combine asset names and corresponding stats
    data = [tuple([asset] + list(stat)) for asset, stat in zip(assets, stats)]

    # Print the table
    print(title)
    print(tabulate(data, headers=headers, tablefmt="pretty"))
    print("\n")

# Daily Stats Print
print_stats("Daily Stats", btc_stats, aapl_stats, googl_stats, amzn_stats, nvda_stats, ndx_stats, xu100_stats, akbnk_stats, tuprs_stats)

# Weekly Stats Print
print_stats("Weekly Stats", btc_stats_weekly, aapl_stats_weekly, googl_stats_weekly, amzn_stats_weekly, nvda_stats_weekly, ndx_stats_weekly, xu100_stats_weekly, akbnk_stats_weekly, tuprs_stats_weekly)

# Monthly Stats Print
print_stats("Monthly Stats", btc_stats_monthly, aapl_stats_monthly, googl_stats_monthly, amzn_stats_monthly, nvda_stats_monthly, ndx_stats_monthly, xu100_stats_monthly, akbnk_stats_monthly, tuprs_stats_monthly)

# Yearly Stats Print
print_stats("Yearly Stats", btc_stats_yearly, aapl_stats_yearly, googl_stats_yearly, amzn_stats_yearly, nvda_stats_yearly, ndx_stats_yearly, xu100_stats_yearly, akbnk_stats_yearly, tuprs_stats_yearly)

# Create a figure with 2 subplots (one for US stocks and one for Turkish stocks)
fig, axs = plt.subplots(2, figsize=(12,8))

# Plot US index (NASDAQ) and US stocks in the first subplot
axs[0].set_title('US Index (NASDAQ) and US Stocks', fontsize=20)
axs[0].set_xlabel('Date', fontsize=16)
axs[0].set_ylabel('Price', fontsize=16)

# Create a second y-axis for the NASDAQ data
ax2 = axs[0].twinx()

# Plot NASDAQ on the second y-axis
ax2.plot(close_prices_daily['^NDX'].fillna(method='ffill'), label='NASDAQ', color='tab:blue')
ax2.tick_params(axis='y', labelcolor='tab:blue')
ax2.legend(loc='upper right', bbox_to_anchor=(1, 1), fontsize=14)  # Move NASDAQ legend to right

# Plot the stocks on the first y-axis
axs[0].plot(close_prices_daily['AAPL'].fillna(method='ffill'), label='AAPL', color='tab:orange')
axs[0].plot(close_prices_daily['GOOGL'].fillna(method='ffill'), label='GOOGL', color='tab:green')
axs[0].plot(close_prices_daily['AMZN'].fillna(method='ffill'), label='AMZN', color='tab:red')
axs[0].plot(close_prices_daily['NVDA'].fillna(method='ffill'), label='NVDA', color='tab:purple')
axs[0].legend(loc='upper left', fontsize=14)

# Plot Turkish Stock index (BIST100) and Turkish stocks in the second subplot
axs[1].set_title('Turkish Stock Index (BIST100) and Turkish Stocks', fontsize=20)
axs[1].set_xlabel('Date', fontsize=16)
axs[1].set_ylabel('Price', fontsize=16)

# Create a second y-axis for the BIST100 data
ax3 = axs[1].twinx()
ax3.plot(close_prices_daily['XU100.IS'].fillna(method='ffill'), label='BIST100', color='tab:red')
ax3.tick_params(axis='y', labelcolor='tab:red')
ax3.legend(loc='upper right', bbox_to_anchor=(1, 1), fontsize=14)  # Move BIST100 legend to right

axs[1].plot(close_prices_daily['AKBNK.IS'].fillna(method='ffill'), label='AKBNK.IS')
axs[1].plot(close_prices_daily['TUPRS.IS'].fillna(method='ffill'), label='TUPRS.IS')
axs[1].legend(loc='upper left', fontsize=14)

# Display the plot
plt.tight_layout()
plt.show()

# Calculate daily returns for each stock
btc_returns = linear_btc_returns[1:]
aapl_returns = linear_aapl_returns[1:]
googl_returns = linear_googl_returns[1:]
amzn_returns = linear_amzn_returns[1:]
nvda_returns = linear_nvda_returns[1:]

# Create a figure and axis for subplots
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15, 10))
fig.suptitle('Histograms of Daily Returns - US Stocks vs Bitcoin', fontsize=16)

# Plot histograms for each stock against Bitcoin with increased sensitivity (more bins)
bins = 100

def calculate_stats(data, label):
    mean = np.mean(data)
    std_dev = np.std(data)
    print(f"{label} Mean: {mean:.6f}, Standard Deviation: {std_dev:.6f}")

# AAPL vs BTC
aapl_data = linear_aapl_returns.dropna()
btc_data = linear_btc_returns.dropna()
axes[0, 0].hist(aapl_data, bins=bins, color='blue', alpha=0.5, label='AAPL')
axes[0, 0].hist(btc_data, bins=bins, color='gray', alpha=0.5, label='BTC')
axes[0, 0].set_title('AAPL vs BTC')
axes[0, 0].legend()
calculate_stats(aapl_data, 'AAPL')
calculate_stats(btc_data, 'BTC')

# GOOGL vs BTC
googl_data = linear_googl_returns.dropna()
axes[0, 1].hist(googl_data, bins=bins, color='green', alpha=0.5, label='GOOGL')
axes[0, 1].hist(btc_data, bins=bins, color='gray', alpha=0.5, label='BTC')
axes[0, 1].set_title('GOOGL vs BTC')
axes[0, 1].legend()
calculate_stats(googl_data, 'GOOGL')

# AMZN vs BTC
amzn_data = linear_amzn_returns.dropna()
axes[1, 0].hist(amzn_data, bins=bins, color='red', alpha=0.5, label='AMZN')
axes[1, 0].hist(btc_data, bins=bins, color='gray', alpha=0.5, label='BTC')
axes[1, 0].set_title('AMZN vs BTC')
axes[1, 0].legend()
calculate_stats(amzn_data, 'AMZN')

# NVDA vs BTC
nvda_data = linear_nvda_returns.dropna()
axes[1, 1].hist(nvda_data, bins=bins, color='purple', alpha=0.5, label='NVDA')
axes[1, 1].hist(btc_data, bins=bins, color='gray', alpha=0.5, label='BTC')
axes[1, 1].set_title('NVDA vs BTC')
axes[1, 1].legend()
calculate_stats(nvda_data, 'NVDA')

# Adjust layout for better appearance
plt.tight_layout(rect=[0, 0, 1, 0.96])

# Show the plots
plt.show()

